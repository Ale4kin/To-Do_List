type: edu
files:
- name: src/index.html
  visible: true
  text: |
    <!doctype html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>To-Do List</title>
        <style>
            * {
                box-sizing: border-box;
            }

            /* Remove margins and padding from the list */
            ul {
                margin: 0;
                padding: 0;
            }

            /* Style the list items */
            ul li {
                cursor: pointer;
                position: relative;
                padding: 12px 8px 12px 40px;
                background: #eee;
                font-size: 18px;
                transition: 0.2s;

                /* make the list items unselectable */
                -webkit-user-select: none;
                -moz-user-select: none;
                -ms-user-select: none;
                user-select: none;
            }

            /* Set all odd list items to a different color (zebra-stripes) */
            ul li:nth-child(odd) {
                background: #f9f9f9;
            }

            /* Darker background-color on hover */
            ul li:hover {
                background: #ddd;
            }

            /* When clicked on, add a background color and strike out text */
            ul li.checked {
                background: #888;
                color: #fff;
                text-decoration: line-through;
            }

            /* Add a "checked" mark when clicked on */
            ul li.checked::before {
                content: '';
                position: absolute;
                border-color: #fff;
                border-style: solid;
                border-width: 0 2px 2px 0;
                top: 10px;
                left: 16px;
                transform: rotate(45deg);
                height: 15px;
                width: 7px;
            }

            /* Style the close button */
            .close {
                position: absolute;
                right: 0;
                top: 0;
                padding: 12px 16px 12px 16px;
            }

            .close:hover {
                background-color: #f44336;
                color: white;
            }

            /* Style the header */
            .header {
                background-color: #f44336;
                padding: 30px 40px;
                color: white;
                text-align: center;
            }

            /* Clear floats after the header */
            .header:after {
                content: "";
                display: table;
                clear: both;
            }

            /* Style the input */
            input {
                margin: 0;
                border: none;
                border-radius: 0;
                width: 75%;
                padding: 10px;
                float: left;
                font-size: 16px;
            }

            /* Style the "Add" button */
            #add-task-button {
                padding: 10px;
                width: 25%;
                background: #d9d9d9;
                color: #555;
                float: left;
                text-align: center;
                font-size: 16px;
                cursor: pointer;
                transition: 0.3s;
                border-radius: 0;
            }

            #add-task-button:hover {
                background-color: #bbb;
            }

            #input-task {
            }

            #task-list {

            }
            .task{
                position: relative;
            }

            .delete-btn {
                position: relative;
                image: url('https://findicons.com/icon/62579/button_cancel')
            }

        </style>
    </head>
    <body>

    <div id="myDIV" class="header">
        <h2>To-Do List</h2>
        <input type="text" id="input-task" placeholder="Title...">
        <button id="add-task-button">ADD TASK</buttom>

        </button>
    </div>

    <ul id="task-list">

        <li>
            <input type="checkbox">
            <span class="task">
                English </span>span>
          <button class="delete-btn"></button>
        </li>

        <li>
            <input type="checkbox">
            <span class="task">
                Yoga</span>
        <button class="delete-btn"></button>
        </li>
        <li>
            <input type="checkbox">
            <span class="task">
                Buy products</span>
            <button class="delete-btn"></button>
        </li>

    </ul>


    </body>
    </html>
  learner_created: false
- name: test/test.js
  visible: false
  text: |
    const puppeteer = require('puppeteer');
    const path = require('path');
    // '..' since we're in the test/ subdirectory; learner is supposed to have src/index.html
    const pagePath = 'file://' + path.resolve(__dirname, '../src/index.html');
    const hs = require('hs-test-web');
    const sleep = (ms) => new Promise(res => setTimeout(res, ms));

    async function stageTest() {

        const browser = await puppeteer.launch({
            headless: false,
            defaultViewport: null,
            args: ['--start-maximized', '--disable-infobar'],
            ignoreDefaultArgs: ['--enable-automation']
        });

        const page = await browser.newPage();
        await page.goto(pagePath);

        await sleep(1000);

        let result = await hs.testPage(page,
            // Test #1 - Check title
            () => {
                if (document.title !== 'To-Do List') {
                    return hs.wrong("The title of the page should be 'To-Do List'")
                }
                return hs.correct();
            },

            // Test #2 - Check elements
            () => {
                const inputField = document.getElementById("input-task")
                if (inputField === null || inputField.tagName !== 'INPUT')
                    return hs.wrong("Can't find input field with id '#input-task'")

                const addButton = document.getElementById("add-task-button")
                if (addButton === null || addButton.tagName !== 'BUTTON')
                    return hs.wrong("Can't find button with id '#add-task-button'")

                this.taskList = document.getElementById("task-list")
                if (this.taskList === null || this.taskList.tagName !== 'UL')
                    return hs.wrong("Can't find <ul> tag with id '#task-list'")

                return hs.correct();
            },

            // Test #3 - Check each task in task list
            () => {

                const tasks = this.taskList.getElementsByTagName("li")
                if (tasks.length !== 3)
                    return hs.wrong("Inside the <ul> tag should be 3 <li> elements!")

                for (let task of tasks) {
                    const checkbox = task.querySelector("input[type=checkbox]")
                    if (checkbox === null)
                        return hs.wrong("Inside each <li> tag should one <input> tag with 'checkbox' type")

                    const taskName = task.querySelector("span.task")
                    if (taskName === null)
                        return hs.wrong("Inside each <li> tag should one <span> tag with 'task' class")

                    const deleteButton = task.querySelector("button.delete-btn")
                    if (deleteButton === null)
                        return hs.wrong("Inside each <li> tag should one <button> tag with 'delete-btn' class")
                }

                return hs.correct();
            },

            // Test #4 - Test adding new task
            () => {

                const inputField = document.getElementById("input-task")
                if (inputField.tagName !== 'INPUT')
                    return hs.wrong("Can't find input field with id '#input-task'")

                inputField.value = "New task for the test purpose"

                const addButton = document.getElementById("add-task-button")
                if (addButton.tagName !== 'BUTTON')
                    return hs.wrong("Can't find button with id '#add-task-button'")

                addButton.click()

                const tasks = this.taskList.getElementsByTagName("li")
                if (tasks.length !== 4)
                    return hs.wrong("After adding a new task to the To-Do list, there should be 4 <li> tags inside the <ul> list")

                for (let task of tasks) {

                    const taskName = task.querySelector("span.task")
                    if (taskName === null)
                        return hs.wrong("Inside each <li> tag should one <spane> tag with 'task' class")

                    if (taskName.textContent === "New task for the test purpose") {
                        return hs.correct()
                    }
                }

                return hs.wrong("Can't find task with name 'New task for the test purpose'.\n" +
                    "The task name should be placed in <span> tag with class 'task'!")
            },

            // Test #5 - Deleting task
            () => {

                let tasks = this.taskList.getElementsByTagName("li")

                for (let task of tasks) {
                    const taskName = task.querySelector("span.task")
                    if (taskName === null)
                        return hs.wrong("Inside each <li> tag should one <spane> tag with 'task' class")

                    if (taskName.textContent === "New task for the test purpose") {
                        const deleteButton = task.querySelector("button.delete-btn")
                        if (deleteButton === null)
                            return hs.wrong("Inside each <li> tag should one <button> tag with 'delete-btn' class")
                        deleteButton.click()
                        break
                    }
                }

                tasks = this.taskList.getElementsByTagName("li")

                for (let task of tasks) {
                    const taskName = task.querySelector("span.task")
                    if (taskName === null)
                        return hs.wrong("Inside each <li> tag should one <spane> tag with 'task' class")

                    if (taskName.textContent === "New task for the test purpose") {
                        return hs.wrong("After deleting a task with name 'New task for the test purpose' it is still in the task list!")
                    }
                }

                return hs.correct()
            }
        );

        await browser.close();
        return result;
    }


    jest.setTimeout(30000);
    test("Test stage", async () => {
            let result = await stageTest();
            if (result['type'] === 'wrong') {
                fail(result['message']);
            }
        }
    );
  learner_created: false
feedback_link: https://hyperskill.org/projects/183/stages/928/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Tue, 28 Sep 2021 20:10:14 UTC
record: 2
